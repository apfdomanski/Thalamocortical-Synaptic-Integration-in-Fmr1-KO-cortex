// This folder contains simulations supporting results presented in Figs 7-8 in the following paper:
// Domanski APF, Booker S, Wyllie DJA, Isaac JTR, Kind PC (2018)
// "Cellular and Synaptic Compensations Limit Circuit Disruption in Fmr1-KO Mouse but Fail to Prevent Deficits in Information Processing"
// BiorXiv preprint: https://doi.org/10.1101/403725
// Author: Aleksander PF Domanski 2015-2019 University of Bristol, UK aleks.domanski@bristol.ac.uk
// Copyright: (C) Aleksander PF Domanski 2019 University of Bristol, UK
// --------
// License: GNU General Public License version 2
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// http://www.gnu.org/copyleft/gpl.html
// --------
// Usage:
// This simulates the somatic membrane potential deflection in response to an injected current pulse. 
// - Press ‘init & Run’ to simulate.
// - Try changing the injected current magnitude to control the number of spikes.
// - In the console, try typing ‘init_WT_passive()’ or ‘init_KO_passive()’ to switch between the cell intrinsic properties of the WT and KO simulation , respectively. 
// - To compare the voltage responses, keep the previous lines on the graph window screen by right-clicking>keep lines.




//load_file("nrngui.hoc")
load_file("cell defs.hoc")
load_file("channel defs.hoc")
init_active() 
//////////////////////////
//  Simulation control  //
//////////////////////////	
// boxes
objectvar save_window_, rvp_
objectvar scene_vector_[4]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(0,0,0)}

v_init = -65
runStopAt = 5
runStopIn = 1
t = 1000
tstop = 1000
dt = 0.025
steps_per_ms = 40
screen_update_invl = 0.05
realtime = 3.53
stimsource.number=0

cvode.active(1) // Multi order variable time step integration method
cvode.atol(1e-3)







//   I Clamp Electrode  
	
load_file("electrod.hoc")
{ocbox_=new Electrode(0)
	execute("can_locate=1 sec=\"soma\" xloc=0.5 locate(0)", ocbox_)
	execute("vc.dur[0]=0.1 vc.amp[0]=-65", ocbox_)
	execute("vc.dur[1]=2.5 vc.amp[1]=10", ocbox_)
	execute("vc.dur[2]=100 vc.amp[2]=-65", ocbox_)
	execute("stim.del=100 stim.dur=500 stim.amp=0.03", ocbox_)
	execute("vcsteps=5", ocbox_)
	execute("samp=stim.amp  store_vclamp() glyph()", ocbox_)
	ocbox_ = ocbox_.v1
	ocbox_.map("I/V Clamp Electrode", 373, 194, 222.3, 362.7)
}

// Vm readout

{save_window_ = new Graph(0)
	save_window_.size(-23.4167,1072.42,-84.75,35.75)
	scene_vector_[2] = save_window_
	{save_window_.view(-23.4167, -84.75, 1095.83, 120.5, 902, 3, 792.9, 721)}
	graphList[0].append(save_window_)
	save_window_.save_name("graphList[0].")
	save_window_.addexpr("v(.5)", 1, 1, 0.8, 0.9, 2)
}

// Simulation control


{xpanel("RunControl", 0)
	xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
	xbutton("Init & Run","run()")
	xbutton("Stop","stoprun=1")
	xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
	xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
	xbutton("Single Step","steprun()")
	xvalue("t","t", 2 )
	xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
	xvalue("dt","dt", 1,"setdt()", 0, 1 )
	xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
	xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
	xvalue("Real Time","realtime", 0,"", 0, 1 )
	xpanel(22,318)
}
objectvar scene_vector_[1]
{doNotify()}
